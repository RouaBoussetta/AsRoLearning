package com.example.asrolearning;

import java.util.ArrayList;
import java.util.List;

public class QuestionsBank {

    private static List<QuestionsList> SpringBootQuestions(){

        final List <QuestionsList> questionsLists=new ArrayList<>();

        final QuestionsList question1=new QuestionsList("Which of these is a valid Advice annotation?","@AfterError","@AfterReturning","@AfterException","@AfterExecution","@AfterReturning","");
        final QuestionsList question2=new QuestionsList("What does a ViewResolver do?","It supports internationalization of web applications by detecting a user's locale","It generates a view by mapping a logical view name returned by a controller method to a view technology","It creates a unique view determined by the uers's browser type,supporting cross-browser compatibility","It maps custom parameters to SQL views in the database, allowing for dynamic content to be created in the response","It generates a view by mapping a logical view name returned by a controller method to a view technology","");
        final QuestionsList question3=new QuestionsList("The process of linking aspects with other objects to create an advised object is called","dynamic chaining","banding","weaving","interleaving","weaving","");
        final QuestionsList question4=new QuestionsList("Which of these is not a valid method on the JoinPoint interface?","getArgs()","getExceptions()","getSignature()","getTarget()","getExceptions()","");
        final QuestionsList question5=new QuestionsList("What is the root interface for accessing a Spring bean container?","SpringInitContainer","ResourceLoader","ApplicationEventPublisher","BeanFactory","BeanFactory","");
        final QuestionsList question6=new QuestionsList("Which annotation can be used within Spring Security to apply method level security?","@Secured","@RequiresRole","@RestrictedTo","@SecurePath","@Secured","");
        final QuestionsList question7=new QuestionsList("Which property can be used to change the port of a Spring application?","Port","spring.port","spring.settings.port","server.port","server.port","");
        final QuestionsList question8=new QuestionsList("What is the name of the central servlet that dispatches requests to controllers?","DispatchingDelegatorServlet","DispatcherServlet"," Router","FrontControllerServlet","DispatcherServlet","");
        final QuestionsList question9=new QuestionsList("Modularization of a concern that cuts across multiple classes is known as a(n)_","multiclass","aspect","crosscut","sidecut","aspect","");
        final QuestionsList question10=new QuestionsList("Assuming no additional configuration is provided, what is the first selection criteria Spring uses to choose a bean when autowiring a property?","none of these answers","bean type","bean size"," bean name"," bean name","");

        questionsLists.add(question1);
        questionsLists.add(question2);
        questionsLists.add(question3);
        questionsLists.add(question4);
        questionsLists.add(question5);
        questionsLists.add(question6);
        questionsLists.add(question7);
        questionsLists.add(question8);
        questionsLists.add(question9);
        questionsLists.add(question10);


        return questionsLists;
    }

    private static List<QuestionsList> AngularQuestions(){

        final List <QuestionsList> questionsLists=new ArrayList<>();

        final QuestionsList question1=new QuestionsList("What is the RouterModule.forRoot method used for?","Registering any providers that you intend to use in routed components.","Registering route definitions at the root application level.","Indicating that Angular should cheer on your routes to be successful.","Declaring that you intend to use routing only at the root level.","Registering route definitions at the root application level.","");
        final QuestionsList question2=new QuestionsList("What are the two component decorator metadata properties used to set up CSS styles for a component?","  viewEncapsulation and viewEncapsulationFiles.","There is only one and it is the property named css.","css and cssUrl.","styles and styleUrls.","styles and styleUrls.","");
        final QuestionsList question3=new QuestionsList("What directive is used to link an <a> tag to routing?"," routeTo","routerLink","routePath","appLink","routerLink","");
        final QuestionsList question4=new QuestionsList("You want to see what files would be generated by creating a new contact-card component. Which command would you use?"," ng generate component contact-card --dry-run","ng generate component contact-card --no-files","ng generate component component --dry","ng generate component --exclude","ng generate component contact-card --dry-run","");
        final QuestionsList question5=new QuestionsList("What are Angular lifecycle hooks?"," loggers for tracking the health of an Angular app","providers that can be used to track the instances of components","built-in pipes that can be used in templates for DOM events","reserved named methods for components and directives that Angular will call during set times in its execution, and can be used to tap into those lifecycle moments","reserved named methods for components and directives that Angular will call during set times in its execution, and can be used to tap into those lifecycle moments","");
        final QuestionsList question6=new QuestionsList("In order for Angular to process components in an application, where do the component types need to be registered?"," within a script tag in the index.html file","in an NgModule decorator metadata tag named components"," No registration is needed simply include the component files in an app directory.","in an NgModule decorator metadata property named declarations","in an NgModule decorator metadata property named declarations","");
        final QuestionsList question7=new QuestionsList("In reactive forms, what Angular form class type is used on the native DOM element to wire it up?"," FormArray","FormControl","FormGroup","all of these answers","FormGroup","");
        final QuestionsList question8=new QuestionsList("How does the emulated view encapsulation mode handle CSS for a component?","  It renders the CSS exactly how you wrote it without any changes.","It makes use of shadow DOM markup and CSS.","It creates unique attributes for DOM elements and scopes the CSS selectors you write to those attribute ids."," It renders all of the CSS rules you write as inline CSS on all of the DOM elements you use them on in the template.\n","It creates unique attributes for DOM elements and scopes the CSS selectors you write to those attribute ids.","");
        final QuestionsList question9=new QuestionsList("What is the primary difference between a component and a directive?"," A component uses a selector metadata property and a directive does not.","A directive can be used for adding custom events to the DOM and a component cannot.","A component has a template and a directive does not.","A directive can target only native DOM elements.","A component has a template and a directive does not.","");
        final QuestionsList question10=new QuestionsList("Pick the best description for this template syntax code: <span>Boss: {{job?.bossName}} </span>"," \n" +
                " The ? is shorthand for the async pipe. The job value must be an Observable."," It is using the safe navigation operator (?) on the job field. If the job field is undefined, the access to the bossName will be ignored and no error will occur.","There is an error in the template syntax. The ? is not valid here.","It is diplaying the job value if it has one; otherwise it is displaying the bossName."," It is using the safe navigation operator (?) on the job field. If the job field is undefined, the access to the bossName will be ignored and no error will occur.","");

        questionsLists.add(question1);
        questionsLists.add(question2);
        questionsLists.add(question3);
        questionsLists.add(question4);
        questionsLists.add(question5);
        questionsLists.add(question6);
        questionsLists.add(question7);
        questionsLists.add(question8);
        questionsLists.add(question9);
        questionsLists.add(question10);


        return questionsLists;
    }

    private static List<QuestionsList> NodeJsQuestions(){

        final List <QuestionsList> questionsLists=new ArrayList<>();

        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question1=new QuestionsList("a"," Plugins","Build","Properties","Parent","Parent","");

        questionsLists.add(question1);
        questionsLists.add(question2);
        questionsLists.add(question3);
        questionsLists.add(question4);
        questionsLists.add(question5);
        questionsLists.add(question6);
        questionsLists.add(question7);
        questionsLists.add(question8);
        questionsLists.add(question9);
        questionsLists.add(question10);


        return questionsLists;
    }

    private static List<QuestionsList> MongoDBQuestions(){

        final List <QuestionsList> questionsLists=new ArrayList<>();

        final QuestionsList question1=new QuestionsList("What element in the pom.xml file allows you to provide values that can be reused in other elements of the pom.xml?"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question2=new QuestionsList(" If you wish to build and package your artifact using the Maven package goal but don't want to execute the unit tests, which environment variable and value would you use?","maven.test.ignore=TRUE","maven.test.run=FALSE","maven.test.skip=TRUE"," maven.verify.execute=FALSE","maven.test.skip=TRUE","");
        final QuestionsList question3=new QuestionsList("What directory structure contains the source code of your artifact?"," src/code"," src/test/java"," src/main/java"," src/main/resources"," src/main/java","");
        final QuestionsList question4=new QuestionsList("Which command is used to run the clean lifecyle followed by verify, install, and package with Maven?","mvn package","mvn clean install package","mvn clean install","mvn clear install","mvn package","");

        questionsLists.add(question1);
        questionsLists.add(question2);
        questionsLists.add(question3);
        questionsLists.add(question4);


        return questionsLists;
    }

    private static List<QuestionsList> AndroidQuestions(){

        final List <QuestionsList> questionsLists=new ArrayList<>();

        final QuestionsList question1=new QuestionsList("What element in the pom.xml file allows you to provide values that can be reused in other elements of the pom.xml?"," Plugins","Build","Properties","Parent","Parent","");
        final QuestionsList question2=new QuestionsList(" If you wish to build and package your artifact using the Maven package goal but don't want to execute the unit tests, which environment variable and value would you use?","maven.test.ignore=TRUE","maven.test.run=FALSE","maven.test.skip=TRUE"," maven.verify.execute=FALSE","maven.test.skip=TRUE","");
        final QuestionsList question3=new QuestionsList("What directory structure contains the source code of your artifact?"," src/code"," src/test/java"," src/main/java"," src/main/resources"," src/main/java","");
        final QuestionsList question4=new QuestionsList("Which command is used to run the clean lifecyle followed by verify, install, and package with Maven?","mvn package","mvn clean install package","mvn clean install","mvn clear install","mvn package","");

        questionsLists.add(question1);
        questionsLists.add(question2);
        questionsLists.add(question3);
        questionsLists.add(question4);


        return questionsLists;
    }












    public static List<QuestionsList> getQuestions(String selectedTopicName){
        switch (selectedTopicName){
            case "SpringBoot": return SpringBootQuestions();
            case "Angular": return AngularQuestions();
            case "NodeJs": return NodeJsQuestions();
            case "MongoDB": return MongoDBQuestions();
            case "Android": return AndroidQuestions();
            default:return SpringBootQuestions();
        }
    }


}
